---
- name: ensures dirs
  file: path={{ item }} state=directory
  with_items:
    - /usr/local/bin
    - "{{ lookup('env', 'HOME') }}/.kube/install"

- name: handle kubernetes-server
  unarchive:
    src: "/tmp/repository/{{ binaries['kubernetes-server']['name'] }}"
    dest: "/usr/local/bin"
    remote_src: yes
    extra_opts:
      - --strip=3
    exclude:
      - "*.tar"
      - "*.docker_tag"

- name: prepare apps
  # debug: var=item
  template: src={{ item.src }} dest="{{ lookup('env', 'HOME') }}/.kube/install/{{ item.path | regex_replace('\.j2$', '') }}"
  with_filetree:
    - "../templates/"
  when: item.state == 'file'

- name: kubeadm init for first master node
  when:
    - groups['master'][0] == inventory_hostname
    - not var_kubeadm_conf.stat.exists
  shell: |
    kubeadm init --config=/root/.kube/install/kubeadmcfg.yml
  register: kubeadm_init
- debug: var=kubeadm_init

- name: fetch generated certificates from first master node
  when:
    - groups['master'][0] == inventory_hostname
  fetch:
    src: "{{ item }}"
    dest: "/tmp/kubernetes/pki/"
    flat: yes
  with_items: 
    - /etc/kubernetes/pki/ca.crt
    - /etc/kubernetes/pki/ca.key
    - /etc/kubernetes/pki/sa.key
    - /etc/kubernetes/pki/sa.pub

- name: copy kubernetes certs to others master nodes
  copy: src={{ item }} dest=/etc/kubernetes/pki/
  when:
    - groups['master'][0] != inventory_hostname
  with_fileglob:
    - /tmp/kubernetes/pki/ca.crt
    - /tmp/kubernetes/pki/ca.key
    - /tmp/kubernetes/pki/sa.key
    - /tmp/kubernetes/pki/sa.pub

- name: kubeadm init for other master nodes
  when:
    - groups['master'][0] != inventory_hostname
  shell: |
    kubeadm init --config=/root/.kube/install/kubeadmcfg.yml
  register: kubeadm_init
- debug: var=kubeadm_init

- name: copy admin.conf to ~/.kube/config
  copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "{{ lookup('env', 'HOME') }}/.kube/config"
    owner: "{{ ansible_user | default(ansible_user_id) }}"
    group: "{{ ansible_user | default(ansible_user_id) }}"
    mode: 0755
    remote_src: true

- name: wait cluster first node ready
  when: groups['master'][0] == inventory_hostname
  shell: |
    while kubectl -n kube-system get pods --field-selector=status.phase==Running 2>&1 | grep '{{ item }}' >/dev/null; [ $? -ne 0 ]; do echo "wait for pods: {{ item}} ..."; sleep 2; done
  with_items:
    - "kube-apiserver"
    - "kube-controller-manager"
    - "kube-scheduler"
# TODO master其他节点同步证书并且进行初始化安装
